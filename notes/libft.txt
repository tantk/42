ft_striteri
void ft_striteri(char *s, void (*f)(unsigned int, char*));
function accepts  its index as first argument.
#psuedocode
while(i < strlen(s))
{
    f(s[i++],s);
}

void *memset(void *str, int c, size_t n)
copies char c to first n character to str

bzero erase data in the n bytes of the memory at location s by setting them to \0

memcpy
copy values from source to destination for num bytes

there is condition, source and destination size need to be num byte

memmove
copies value of num bytes from location

https://pvs-studio.com/en/blog/terms/0044/#:~:text=size_t%20is%20a%20special%20unsigned,the%20sizeof%20and%20alignof%20operators.
size_t
size_t is a special unsigned integer ype defined in stdlib of c and c++.
it is the result returned by sizeof and aligned of operator.

size_t is chosen so that it can store maximum size of theoretically possible array or an object.

like many datatype, size_t's size is dependent on the operating system. 32 bit -> 32 bit . 64 -> 64 bit. This means that it can safely store a pointer.
There are a few exceptions where the platforms have memory segmentation and pointers to class functions.

Size_t is a safer and more efficient choice than using ordinary unsigned integer type.
In the implementation ( we should check it out sometime ),it was designed to store pointers.

some reasons for it being more efficient:
- write loops and counters without worrying about possible overflow when changing platform. i.e. when iteration exceeds UINT_MAX.

- size_t is also used to index arrays because of its characteristic (able to store largest possible object). it ensures that the required iteration cannot exceeds UINT_MAX.

- size_t is also suitable for address arithmetic.

const char * is a pointer to a const char
char * const is a constant pointer to a char

The below 2 are equivalent.
const char* str
char const* str

int       *      mutable_pointer_to_mutable_int;
int const *      mutable_pointer_to_constant_int;
int       *const constant_pointer_to_mutable_int;
int const *const constant_pointer_to_constant_int;

declares a pointer to a constant character string 'str'
const char* str = "hello";

Same as the previous example, declares a pointer to a constant strng
char const* str = "world";

declares a constant pointer to a character string; pointer canot change.
char* const ptr = "Constant";

Declares a constant pointer to a constant string; both are immutable.
const char* const ptr = "immutable";

I have problem with memset due to void being unassignable.
After checking the standard library book, he was using unsigned char as the working type within memset. The reason being ,some implementation might generate an overflow storing certain int values in other characters types.

In memset, the function tries to improve on memcpy. Where there will be undefined behavior when address of src and dst overlaps.
whenever there is a overlapping memory, the function should reverse the order of the copying process, i.e. instead of copying from index 0 from src, its copying from the last index of src to the index 0.
Note that it is faster to use memcpy if we are very sure that the address do not overlap. memmove should be slower because of the extra checks that it is doing.


strlcpy
guarantee nul termination, src mustbe nul terminated.
it returns length of src

strlcat
both src and dst must be nul terminated.
initial length of dst + length of src. length of dst is the shorter of size or length of d

void *memchr(const void *s, int c, size_t n)
scan initial n bytes of the memory for the first instance of C.
c and s are interpreted as unsigned char.
return address

int memcmp(const void *s1, const void *s2, size_t n)


    compares first n bytes of memory
    returns integer less than, equal to or greater than zero if a match is found. if n is zero, the return value is zero.

char *strnstr(const char *big, const char *little, size_t len);
locates first occurence of null terminated string little in the string big. The search wont last more than len charaacters.

characters that appeared after a \0 character are not searched.

if little is an empty string, big is return.
if little is not in big, NULL is returned.
otherwise, pointer to the first character of the first occurence of little is returned.
using strncmp here make things easier but inefficient.

malloc
allocates size bytes and returns a pointer to the allocated memory.
memory is not initialized. if the size is 0 then malloc returns NULL or a unique pointer value that can be pass to the free function.

free
frees the memory space pointed to by ptr, which must have been returned by a previous call to malloc, calloc or realloc. if free has already been alled, the behavior is undefined. if the ptr is NULL, no operation is performed.

calloc
void *calloc(size_t nmemb, size_t size)
allocates memory for an array of nmemb elements of size bytes each and returns a pointer to the allocated memory. memory is initialized to zero.
if nmemb of size is 0, calloc returns either NULL or unique pointer value that can be passed to free. if multiplication of nmemb and size would result in integer overflow, then calloc returns an error.

strdup
returns a pointer to a new string which is a duplicate of the string s. the new string is obtained with malloc and can be freed with free.



